@model  IEnumerable<Domain.Dashboards.Zone>
@{
    ViewBag.Title = "Dashboard";
}

<h2>Dashboard</h2> 
@*<div id="dashboard">
    @* @if (Request.IsAuthenticated)
        {
    @foreach (var zone in Model)
    {
        <div class="card mb-3" align="center">
            <button class="card-header" onclick="visible(@zone.Id)">
                @Html.DisplayFor(modelItem => zone.Naam, new { htmlAttributes = new { @class = "card-header" } })
                @Html.ActionLink("x", "DeleteZone", new { zoneId = zone.Id }, new { htmlAttributes = new { @class = "card-footer" } })
            </button>
            <div class="card-body" id="@zone.Id" style="display:none">
                @Html.Action("_ItemsPartial", new { zoneId = zone.Id })
            </div>
        </div>*@

    <script>
        var id = 0;
        function visible(zone) {
            var items = document.getElementById(zone);
            if (items.style.display == 'none') {
                items.style.display = 'block';
                if (id != 0 && id != zone) {
                    var item = document.getElementById(id);
                    item.style.display = 'none'; 
                }
                id = zone;
            } else
            {
                items.style.display = 'none';
            }
            
        }
    </script>
    @*<div class="container">
        @foreach (var item in Model)
        {
            <div class="card bg-light">
                <div contenteditable="true">
                    @Html.DisplayFor(modelItem => item.Naam, new { htmlAttributes = new { @class = "card-header" } })
                </div>
                @Html.ActionLink("setActive", "setActiveZone", new { zoneId = item.Id }, new { htmlAttributes = new { @class = "card-body" } })


                @Html.ValidationMessageFor(modelItem => item.Naam, "", new { @class = "text-danger" })

                @Html.ActionLink("x", "DeleteZone", new { zoneId = item.Id }, new { htmlAttributes = new { @class = "card-footer" } })
            </div>
        }
        @Html.ActionLink("plus", "AddZone", null, new { @class = "newtab" })
    </div>
    <div id="tab">

    </div>
</div>*@



<div class="container border-danger">

    <ul class="nav nav-tabs nav-stacked">
        @foreach (var zone in Model)
        {
            <li>
                <button data-toggle="tab" href="@zone.Id" onclick="visible(@zone.Id)" class="tab-links">
                    @Html.DisplayFor(modelItem => zone.Naam)
                </button>
                @Html.ActionLink("x", "DeleteZone", new { zoneId = zone.Id })

            </li>
        }
        <li>@Html.ActionLink("plus", "AddZone", null, new { @class = "newtab" })</li>
    </ul>
    @foreach (var zone in Model)
    {
        <div class="tab-content bg-light">
            <div id="@zone.Id" class="tab-pane" style="display:none">
                <h3>@Html.Action("_ItemsPartial", new { zoneId = zone.Id })</h3>
            </div>
        </div>
    }
</div>
<script>
      function openCity(evt, cityName) {
        // Declare all variables
        var i, tabcontent, tablinks;

        // Get all elements with class="tabcontent" and hide them
        tabcontent = document.getElementsByClassName("tab-content");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Get all elements with class="tablinks" and remove the class "active"
        tablinks = document.getElementsByClassName("tab-links");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }

        // Show the current tab, and add an "active" class to the button that opened the tab
        document.getElementById(cityName).style.display = "block";
        evt.currentTarget.className += " active";
    }
</script>